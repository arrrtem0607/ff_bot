import logging

from aiogram import Bot, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.types import ReplyKeyboardRemove

from src.configurations import MainConfig
from src.bot.keyboards.inline import InlineKeyboards
from src.bot.keyboards.reply import ReplyKeyboards
from src.bot.utils.statesform import Authorization
from src.database.controllers.ORM import ORMController

router = Router()

logger = logging.getLogger(__name__)


@router.startup()
async def notify_start(bot: Bot, config: MainConfig):
    await bot.send_message(config.bot_config.get_developers_id(), "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")


@router.shutdown()
async def stop_bot(bot: Bot,
                   config: MainConfig):
    await bot.send_message(config.bot_config.get_developers_id(), "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")


@router.message(Command("cancel"))
async def return_to_menu(message: Message,
                         state: FSMContext,
                         db_controller: ORMController):
    await state.clear()
    role = db_controller.get_user_role(message.from_user.id)
    await message.answer(text='–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É —É–ø–∞–∫–æ–≤–∫–∏',
                         reply_markup=InlineKeyboards().menu(role=role))


@router.message(Command("start"))
async def get_start(message: Message,
                    state: FSMContext,
                    authorized: bool,
                    db_controller: ORMController):
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã 'start' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username}")

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.clear()
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} –æ—á–∏—â–µ–Ω–æ")

    if not authorized:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        await message.answer("<b>–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç-—Ü–µ–Ω—Ç—Ä–∞! üëã</b>\n"
                             "<i>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. üîë</i>\n\n"
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
                             reply_markup=ReplyKeyboards().contact_kb())
        await state.set_state(Authorization.GET_CONTACT)
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ GET_CONTACT")
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.")
        role = await db_controller.get_user_role(message.from_user.id)
        await message.answer(text=f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}! –ü—Ä–∏—è—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã! ü•∞",
                             reply_markup=InlineKeyboards().menu(role=role))
        logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.username}")


@router.message(F.contact, Authorization.GET_CONTACT)
async def get_contact(message: Message, bot: Bot, config: MainConfig, state: FSMContext):
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –æ–¥–æ–±—Ä–∏—Ç –í–∞—à—É –∑–∞—è–≤–∫—É "
                         "–ø—Ä–µ–∂–¥–µ, —á–µ–º –í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ! üì¶\n"
                         "<b>–Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—à–ª—é –í–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç</b> üòâ")
    msg: Message = await message.answer("–ß–∏—Å—Ç–∏–º –∑–∞ —Å–æ–±–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...",
                                        reply_markup=ReplyKeyboardRemove())
    await msg.delete()
    tg_id = message.from_user.id
    username = message.from_user.username or "None"
    phone = message.contact.phone_number or "None"
    name = message.contact.first_name or "None"
    try:
        await bot.send_message(config.bot_config.get_developers_id(),
                               "–í–∞–º –ø—Ä–∏—à–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:\n\n"
                               f"–ò–º—è (telegram): {message.from_user.first_name}\n"
                               f"Username: {username}\n"
                               f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}",
                               reply_markup=InlineKeyboards().admin_choice(tg_id=tg_id,
                                                                           username=username,
                                                                           phone=phone,
                                                                           name=name))
        await state.set_state(Authorization.SET_NAME)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
