from datetime import datetime
import logging
from aiogram import Router, Bot, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, callback_query
from src.bot.keyboards.inline import InlineKeyboards
from src.bot.utils.statesform import Packing
from src.database.controllers.ORM import ORMController

router: Router = Router()

logger = logging.getLogger(__name__)

'''
@router.message(Command("start"))
async def get_start(message: Message, state: FSMContext, authorized: bool):
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã 'start' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username}")

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.clear()
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} –æ—á–∏—â–µ–Ω–æ")

    if not authorized:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        await message.answer("<b>–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç-—Ü–µ–Ω—Ç—Ä–∞! üëã</b>\n"
                             "<i>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. üîë</i>\n\n"
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
                             reply_markup=ReplyKeyboards().contact_kb())
        await state.set_state(Authorization.GET_CONTACT)
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ GET_CONTACT")
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.")
        await message.answer(text=f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}! –ü—Ä–∏—è—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã! ü•∞",
                             reply_markup=InlineKeyboards().start_packing())
        logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.username}")


@router.message(F.contact, Authorization.GET_CONTACT)
async def get_contact(message: Message, bot: Bot, config: MainConfig):
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –æ–¥–æ–±—Ä–∏—Ç –í–∞—à—É –∑–∞—è–≤–∫—É "
                         "–ø—Ä–µ–∂–¥–µ, —á–µ–º –í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ! üì¶\n"
                         "<b>–Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—à–ª—é –í–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç</b> üòâ")
    msg: Message = await message.answer("–ß–∏—Å—Ç–∏–º –∑–∞ —Å–æ–±–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...",
                                        reply_markup=ReplyKeyboardRemove())
    await msg.delete()
    tg_id = message.from_user.id
    username = message.from_user.username or "None"
    phone = message.contact.phone_number or "None"
    name = message.contact.first_name or "None"
    try:
        await bot.send_message(config.bot_config.get_developers_id(),
                               "–í–∞–º –ø—Ä–∏—à–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:\n\n"
                               f"–ò–º—è (telegram): {message.from_user.first_name}\n"
                               f"Username: {username}\n"
                               f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}",
                               reply_markup=InlineKeyboards().admin_choice(tg_id=tg_id,
                                                                           username=username,
                                                                           phone=phone,
                                                                           name=name))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
'''


# –§—É–Ω–∫—Ü–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º—è —É–ø–∞–∫–æ–≤–∫–∏
@router.callback_query(F.data == 'start_packing')
async def start_to_pack(message: Message, bot: Bot, state: FSMContext):

    await bot.send_message(chat_id=message.from_user.id,
                           text='–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Å —ç—Ç–∏–∫–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é –í–∞–º –≤—ã–¥–∞–ª–∏')
    await state.set_state(Packing.PRODUCT_SELECTION)


@router.message(F.text, Packing.PRODUCT_SELECTION)
async def pack_products(message: Message, bot: Bot, state: FSMContext, db_controller: ORMController):
    try:
        sku = int(message.text)
    except ValueError:
        await bot.send_message(chat_id=message.chat.id,
                               text='SKU –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')
        return

    good = await db_controller.get_good_attribute_by_sku(sku=sku,
                                                         attribute_name='sku')
    # video_url = await db_controller.get_good_attribute_by_sku(sku=sku,attribute_name='video_url')

    technical_task = await db_controller.get_good_attribute_by_sku(sku=sku,
                                                                   attribute_name='technical_task')
    if good:

        await state.update_data(sku=sku)
        await bot.send_message(chat_id=message.chat.id,
                               text=f'–í—Ä–µ–º—è —É–ø–∞–∫–æ–≤–∫–∏ –∑–∞—Å–µ—á–µ–Ω–æ. '
                                    f'–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Ü–µ —É–ø–∞–∫–æ–≤–∫–∏. '
                                    f'–î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '
                                    f'–ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. '
                                    f'–û—á–µ–Ω—å –≤–∞–∂–Ω–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é. '
                                    f'–ö—Å—Ç–∞—Ç–∏, –≤–æ—Ç –∏ –æ–Ω–æ: {technical_task}',
                               reply_markup=InlineKeyboards().end_packing())

        '''
        if video_url:
            await bot.send_video(chat_id=message.chat.id, video=video_url)
        '''

        await state.update_data(start_packing_time=datetime.now().isoformat())
        await state.set_state(Packing.PACKING_TIME)
        stata = await state.get_state()
        logger.info(f'–°–æ—Å—Ç–æ—è–Ω–∏–µ:{stata}')

    else:
        await message.answer(text="–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º SKU –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª")


@router.callback_query(F.data == 'end_packing', Packing.PACKING_TIME)
async def end_packing(callback: callback_query, state: FSMContext):
    await callback.message.edit_text(text='–í—Ä–µ–º—è —É–ø–∞–∫–æ–≤–∫–∏ –∑–∞–∫–æ–Ω—á–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞')
    await state.update_data(end_packing_time=datetime.now().isoformat())
    await state.set_state(Packing.REPORT_PACKING_INFO)


@router.message(F.text, Packing.REPORT_PACKING_INFO)
async def report_packing(message: Message, bot: Bot, state: FSMContext, db_controller: ORMController):
    print('–Ø —Ç—É—Ç')
    logger.info('–Ø —Ç—É—Ç')
    try:
        quantity_packing = int(message.text)
    except ValueError:
        await bot.send_message(chat_id=message.chat.id,
                               text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º')
        return

    await state.update_data(quantity_packing=quantity_packing)
    packing_info = await state.get_data()

    sku = packing_info.get('sku')
    start_time = datetime.fromisoformat(packing_info.get('start_packing_time'))
    end_time = datetime.fromisoformat(packing_info.get('end_packing_time'))
    quantity_packing = packing_info.get('quantity_packing')

    await state.clear()

    name = await db_controller.get_good_attribute_by_sku(sku=sku,
                                                         attribute_name='name')
    duration = (end_time - start_time).total_seconds()
    performance = duration / quantity_packing
    performance = round(performance, 2)
    username = message.from_user.username or 'None'
    role = db_controller.get_user_role(message.from_user.id)
    await bot.send_message(chat_id=message.chat.id,
                           text=f'–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, —Ç—ã —É–ø–∞–∫–æ–≤–∞–ª {quantity_packing} {name} –≤—Å–µ–≥–æ –∑–∞ {duration} —Å–µ–∫—É–Ω–¥. '
                                f'–¢–≤–æ—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–∏–ª–∞ {performance} {name} –≤ —Å–µ–∫—É–Ω–¥—É',
                           reply_markup=InlineKeyboards().menu(role))
    await db_controller.add_packing_info(sku=sku,
                                         username=username,
                                         start_time=start_time,
                                         end_time=end_time,
                                         duration=duration,
                                         quantity_packing=quantity_packing,
                                         performance=performance)
