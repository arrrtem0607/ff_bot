from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from src.bot.utils.callbackfabric import *


class InlineKeyboards:
    def __init__(self):
        self.keyboard = InlineKeyboardBuilder()

    def admin_menu(self):
        self.keyboard.button(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º', callback_data='status')
        self.keyboard.button(text='–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä', callback_data='add')
        self.keyboard.button(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä', callback_data='change_sku')
        self.keyboard.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö", callback_data='change_worker')
        self.keyboard.adjust(1)
        return self.keyboard.as_markup()

    def admin_choice(self, tg_id: int,
                     username: str,
                     phone: str,
                     name: str) -> InlineKeyboardMarkup:
        accept_data = AcceptChoice(accept=True, tg_id=tg_id, username=username, phone=phone, name=name)
        reject_data = AcceptChoice(accept=False, tg_id=tg_id, username=username, phone=phone, name=name)
        self.keyboard.button(text="–û–¥–æ–±—Ä–∏—Ç—å ‚úÖ", callback_data=accept_data)
        self.keyboard.button(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", callback_data=reject_data)
        self.keyboard.adjust(1)
        return self.keyboard.as_markup()

    def start_packing(self):
        self.keyboard.button(text='–ù–∞—á–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É', callback_data='start_packing')
        self.keyboard.adjust(1)
        return self.keyboard.as_markup()

    def end_packing(self):
        self.keyboard.button(text='–ó–∞–∫–æ–Ω—á–∏—Ç—å —É–ø–∞–∫–æ–≤–∫—É', callback_data='end_packing')
        self.keyboard.adjust(1)
        return self.keyboard.as_markup()

    async def admin(self, storage: RedisStorage) -> InlineKeyboardMarkup:
        check_first: str = await storage.redis.get("show_token")
        check_second: str = await storage.redis.get("check_donate")
        first_emo: str = '‚úÖ' if int(check_first) else '‚ùå'
        second_emo: str = '‚úÖ' if int(check_second) else '‚ùå'
        self.keyboard.button(text=f"–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ | {first_emo}",
                             callback_data=Admin(show_token=True))
        self.keyboard.button(text=f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–Ω–∞—Ç–æ–≤ | {second_emo}",
                             callback_data=Admin(check_donate=True))
        self.keyboard.button(text="–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–Ω–∞—Ç–æ–≤ ‚úèÔ∏è",
                             callback_data=Admin(frequency=True))
        self.keyboard.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–Ω–∞—Ç–∞ ‚úèÔ∏è",
                             callback_data=Admin(time_last=True))
        self.keyboard.button(text="–ü–æ–º–µ–Ω—è—Ç—å –≤—Ä—É—á–Ω—É—é API-–∫–ª—é—á –¥–ª—è Donation Alerts üîë",
                             callback_data=Admin(api=True))
        self.keyboard.adjust(1)
        return self.keyboard.as_markup()

    async def build_goods_keyboard(self, goods):
        for good in goods:
            self.keyboard.button(text=f"{good.sku}",
                                 callback_data=f"choose_{good.sku}")
        self.keyboard.adjust(3)
        return self.keyboard.as_markup()

    async def choose_sku_field(self):
        self.keyboard.button(text='–ù–∞–∑–≤–∞–Ω–∏–µ',
                             callback_data='name')
        self.keyboard.button(text='–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ',
                             callback_data='technical_task')
        self.keyboard.button(text='–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ',
                             callback_data='video_url')
        return self.keyboard.adjust(3).as_markup()

    async def choose_worker_field(self):
        self.keyboard.button(text='–ù–∏–∫–Ω–µ–π–º',
                             callback_data='username')
        self.keyboard.button(text='–ò–º—è',
                             callback_data='name')
        self.keyboard.button(text='–î–æ–ª–∂–Ω–æ—Å—Ç—å',
                             callback_data='role')
        self.keyboard.button(text='–ó–∞—Ä–ø–ª–∞—Ç–∞',
                             callback_data='salary')
        return self.keyboard.adjust(3).as_markup()

    async def build_workers_keyboard(self, workers):
        for worker in workers:
            self.keyboard.button(text=f"{worker.name}",
                                 callback_data=f"choose_{worker.name}")
        self.keyboard.adjust(3)
        return self.keyboard.as_markup()

    def choose_role(self):
        self.keyboard.button(text='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', callback_data='admin')
        self.keyboard.button(text='–£–ø–∞–∫–æ–≤—â–∏–∫', callback_data='packer')
        self.keyboard.button(text='–ì—Ä—É–∑—á–∏–∫', callback_data='loader')
        self.keyboard.button(text='–ú–µ–Ω–µ–¥–∂–µ—Ä', callback_data='manager')
        return self.keyboard.adjust(3).as_markup()
